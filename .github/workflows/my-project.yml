# This is a basic workflow to help you get started with Actions

name: My-Great-Project

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore:
    - '.github/**'
    - 'README.md'
  
env:
  AWS_DEFAULT_REGION: us-east-1
  IMAGE: sargsyan/docker-repo
  IMAGE_TAG: ${{ github.sha }}
  SQL_HOST: ${{ secrets.SQL_HOST }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This is "CI-part"
  CI-part:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Clone GitHub repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
     
      # Build and Push container to DockerHub
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}
   

  # This is "CI-part"
  CD-part:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Waiting for 'CI-part'
    needs: CI-part
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Clone GitHub repo
      uses: actions/checkout@v3
      
    # Login to AWS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    # Run bash commands to update, create secret and deploy kubectl
    - name: run commands
      shell: bash
      run: |
        aws eks update-kubeconfig --name im-cluster
        kubectl create namespace djangoproject || true
        kubectl create secret --namespace=djangoproject docker-registry regcred --docker-server=docker.io --docker-username=${{ secrets.DOCKER_USERNAME }} --docker-password=${{ secrets.DOCKER_PASSWORD }} || true
        envsubst < depl.yaml > ${{ github.sha }}.yaml
        kubectl apply -f ${{ github.sha }}.yaml
        
